import streamlit as st
from docx import Document
import pandas as pd
import numpy as np
import io
import re
# Import th∆∞ vi·ªán Gemini/Google AI
from google import genai
from google.genai.errors import APIError

# Thay th·∫ø b·∫±ng API key th·ª±c t·∫ø c·ªßa b·∫°n
# Khuy·∫øn ngh·ªã: S·ª≠ d·ª•ng st.secrets ƒë·ªÉ l∆∞u API key trong m√¥i tr∆∞·ªùng production
# client = genai.Client(api_key=st.secrets["GEMINI_API_KEY"])
# Gi·∫£ ƒë·ªãnh: S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c key tr·ª±c ti·∫øp cho v√≠ d·ª• n√†y
try:
    client = genai.Client(api_key=st.secrets["GEMINI_API_KEY"])
except AttributeError:
    # Fallback n·∫øu kh√¥ng d√πng st.secrets (Ch·ªâ d√πng cho m·ª•c ƒë√≠ch Demo/Local)
    st.error("L·ªói: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY. Vui l√≤ng thi·∫øt l·∫≠p key trong st.secrets ho·∫∑c bi·∫øn m√¥i tr∆∞·ªùng.")
    client = None

# --- H√†m ti·ªán √≠ch ---

def extract_text_from_docx(uploaded_file):
    """ƒê·ªçc v√† tr√≠ch xu·∫•t to√†n b·ªô vƒÉn b·∫£n t·ª´ file Word ƒë√£ t·∫£i l√™n."""
    try:
        doc = Document(uploaded_file)
        full_text = []
        for para in doc.paragraphs:
            full_text.append(para.text)
        return '\n'.join(full_text)
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc file Word: {e}")
        return None

def parse_and_clean_number(text):
    """Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh s·ªë, lo·∫°i b·ªè k√Ω t·ª± kh√¥ng ph·∫£i s·ªë/d·∫•u ph·∫©y/d·∫•u ch·∫•m."""
    if isinstance(text, (int, float)):
        return text
    if not text:
        return 0.0

    # X·ª≠ l√Ω c√°c ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá ph·ªï bi·∫øn (t·ª∑, tri·ªáu, k)
    text = text.lower().replace(',', '.')
    multiplier = 1.0

    if 't·ª∑' in text or 't' in text:
        multiplier = 1_000_000_000
    elif 'tri·ªáu' in text or 'tr' in text:
        multiplier = 1_000_000
    elif 'ngh√¨n' in text or 'k' in text:
        multiplier = 1_000

    # L·ªçc ch·ªâ gi·ªØ l·∫°i s·ªë v√† d·∫•u ch·∫•m (d√πng cho s·ªë th·∫≠p ph√¢n)
    cleaned_text = re.sub(r'[^\d.]', '', text)
    try:
        number = float(cleaned_text)
        return number * multiplier
    except ValueError:
        return 0.0

def calculate_financial_metrics(initial_investment, ncf_yearly, wacc, project_life):
    """T√≠nh to√°n NPV, IRR, PP, DPP."""
    cash_flows = [-initial_investment] + [ncf_yearly] * project_life
    wacc_rate = wacc / 100.0

    # 1. NPV
    npv = np.npv(wacc_rate, cash_flows)

    # 2. IRR
    try:
        irr = np.irr(cash_flows)
    except Exception:
        irr = np.nan

    # 3. PP (Payback Period - Th·ªùi gian ho√†n v·ªën)
    pp = initial_investment / ncf_yearly

    # 4. DPP (Discounted Payback Period - Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)
    cumulative_discounted_cf = 0
    dpp = project_life
    remaining_investment = initial_investment
    
    # T√≠nh d√≤ng ti·ªÅn chi·∫øt kh·∫•u
    discounted_cash_flows = [ncf_yearly / ((1 + wacc_rate)**t) for t in range(1, project_life + 1)]

    for t, dcf in enumerate(discounted_cash_flows):
        remaining_investment -= dcf
        if remaining_investment <= 0:
            # NƒÉm ho√†n v·ªën: t + 1 (v√¨ t b·∫Øt ƒë·∫ßu t·ª´ 0)
            # Ho√†n v·ªën trong nƒÉm (t+1):
            dpp = (t + 1) + (remaining_investment + dcf) / dcf
            break

    return npv, irr, pp, dpp

# --- ƒê·ªãnh nghƒ©a Prompt cho AI (R·∫•t quan tr·ªçng) ---

PROMPT_TEMPLATE = """
B·∫°n l√† m·ªôt tr·ª£ l√Ω t√†i ch√≠nh chuy√™n nghi·ªáp. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch vƒÉn b·∫£n d·ª± √°n kinh doanh ƒë∆∞·ª£c cung c·∫•p d∆∞·ªõi ƒë√¢y v√† tr√≠ch xu·∫•t c√°c th√¥ng s·ªë t√†i ch√≠nh ch√≠nh.

VƒÉn b·∫£n d·ª± √°n:
---
{text_content}
---

H√£y tr·∫£ l·ªùi ch·ªâ b·∫±ng m·ªôt chu·ªói JSON H·ª¢P L·ªÜ (Kh√¥ng c√≥ b·∫•t k·ª≥ k√Ω t·ª± n√†o kh√°c ngo√†i JSON) v·ªõi c·∫•u tr√∫c sau, ƒë·∫£m b·∫£o c√°c gi√° tr·ªã ƒë∆∞·ª£c ƒë∆∞a ra d∆∞·ªõi d·∫°ng s·ªë (n·∫øu l√† ti·ªÅn t·ªá, kh√¥ng c·∫ßn ƒë∆°n v·ªã):

{{
  "V·ªën ƒë·∫ßu t∆∞": <T·ªïng v·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu>,
  "D√≤ng ƒë·ªùi d·ª± √°n (nƒÉm)": <S·ªë nƒÉm ho·∫°t ƒë·ªông c·ªßa d·ª± √°n>,
  "Doanh thu h√†ng nƒÉm": <M·ª©c doanh thu h√†ng nƒÉm>,
  "Chi ph√≠ h√†ng nƒÉm": <M·ª©c chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm>,
  "WACC (%)": <T·ª∑ l·ªá WACC/Chi ph√≠ v·ªën b√¨nh qu√¢n>,
  "Thu·∫ø su·∫•t (%)": <T·ª∑ l·ªá thu·∫ø thu nh·∫≠p doanh nghi·ªáp>
}}

N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng s·ªë n√†o, h√£y ƒëi·ªÅn gi√° tr·ªã 0.
"""

# --- Giao di·ªán Streamlit ---

st.set_page_config(
    page_title="ƒê√°nh gi√° D·ª± √°n Kinh doanh",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("·ª®ng d·ª•ng ƒê√°nh gi√° D·ª± √°n Kinh doanh b·∫±ng AI ü§ñ")
st.markdown("---")

# Kh·ªüi t·∫°o session state
if 'project_data' not in st.session_state:
    st.session_state.project_data = None
if 'file_content' not in st.session_state:
    st.session_state.file_content = None

# --- SIDEBAR: T·∫£i File v√† C·∫•u h√¨nh ---
with st.sidebar:
    st.header("1. T·∫£i File & Tr√≠ch xu·∫•t")
    uploaded_file = st.file_uploader(
        "T·∫£i file Word (.docx) ch·ª©a Ph∆∞∆°ng √°n Kinh doanh",
        type="docx"
    )

    if uploaded_file:
        st.session_state.file_content = extract_text_from_docx(uploaded_file)
        st.success("T·∫£i file th√†nh c√¥ng!")

    if st.session_state.file_content and client:
        if st.button("L·ªåC D·ªÆ LI·ªÜU T·ª™ AI", type="primary"):
            with st.spinner("AI ƒëang ph√¢n t√≠ch v√† tr√≠ch xu·∫•t th√¥ng s·ªë..."):
                try:
                    # G·ª≠i prompt t·ªõi Gemini
                    prompt = PROMPT_TEMPLATE.format(text_content=st.session_state.file_content)
                    
                    response = client.models.generate_content(
                        model='gemini-2.5-flash',
                        contents=prompt,
                        config={"response_mime_type": "application/json"}
                    )
                    
                    # Chuy·ªÉn ƒë·ªïi JSON th√†nh dict
                    data_dict = pd.read_json(io.StringIO(response.text), typ='series').to_dict()
                    
                    # Chu·∫©n h√≥a d·ªØ li·ªáu
                    st.session_state.project_data = {
                        "V·ªën ƒë·∫ßu t∆∞": parse_and_clean_number(data_dict.get("V·ªën ƒë·∫ßu t∆∞")),
                        "D√≤ng ƒë·ªùi d·ª± √°n (nƒÉm)": int(parse_and_clean_number(data_dict.get("D√≤ng ƒë·ªùi d·ª± √°n (nƒÉm)"))),
                        "Doanh thu h√†ng nƒÉm": parse_and_clean_number(data_dict.get("Doanh thu h√†ng nƒÉm")),
                        "Chi ph√≠ h√†ng nƒÉm": parse_and_clean_number(data_dict.get("Chi ph√≠ h√†ng nƒÉm")),
                        "WACC (%)": parse_and_clean_number(data_dict.get("WACC (%)")),
                        "Thu·∫ø su·∫•t (%)": parse_and_clean_number(data_dict.get("Thu·∫ø su·∫•t (%)")),
                    }
                    st.success("Tr√≠ch xu·∫•t th√¥ng s·ªë ho√†n t·∫•t!")
                
                except APIError as e:
                    st.error(f"L·ªói API Gemini: {e}")
                except Exception as e:
                    st.error(f"L·ªói trong qu√° tr√¨nh AI x·ª≠ l√Ω/ph√¢n t√≠ch: {e}")
    elif uploaded_file and not client:
        st.warning("Kh√¥ng th·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng AI do thi·∫øu API Key.")

# --- MAIN CONTENT ---

# 1. Hi·ªÉn th·ªã th√¥ng tin ƒë√£ l·ªçc
if st.session_state.project_data:
    st.header("2. Th√¥ng Tin D·ª± √Ån ƒê√£ L·ªçc")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("üí∞ V·ªën ƒê·∫ßu T∆∞ Ban ƒê·∫ßu", f"{st.session_state.project_data['V·ªën ƒë·∫ßu t∆∞']:,.0f} VNƒê")
        st.metric("üìÖ D√≤ng ƒê·ªùi D·ª± √Ån", f"{st.session_state.project_data['D√≤ng ƒë·ªùi d·ª± √°n (nƒÉm)']} nƒÉm")
        st.metric("üí∏ Chi Ph√≠ H√†ng NƒÉm", f"{st.session_state.project_data['Chi ph√≠ h√†ng nƒÉm']:,.0f} VNƒê")
        
    with col2:
        st.metric("üíµ Doanh Thu H√†ng NƒÉm", f"{st.session_state.project_data['Doanh thu h√†ng nƒÉm']:,.0f} VNƒê")
        st.metric("‚öñÔ∏è WACC (Chi ph√≠ v·ªën)", f"{st.session_state.project_data['WACC (%)']:.2f} %")
        st.metric("üßæ Thu·∫ø Su·∫•t TNDN", f"{st.session_state.project_data['Thu·∫ø su·∫•t (%)']:.0f} %")

    # T√≠nh to√°n NCF h√†ng nƒÉm
    VON_DAU_TU = st.session_state.project_data["V·ªën ƒë·∫ßu t∆∞"]
    DONG_DOI = st.session_state.project_data["D√≤ng ƒë·ªùi d·ª± √°n (nƒÉm)"]
    DOANH_THU = st.session_state.project_data["Doanh thu h√†ng nƒÉm"]
    CHI_PHI = st.session_state.project_data["Chi ph√≠ h√†ng nƒÉm"]
    WACC = st.session_state.project_data["WACC (%)"]
    THUE_SUAT = st.session_state.project_data["Thu·∫ø su·∫•t (%)"] / 100.0

    # Gi·∫£ ƒë·ªãnh kh·∫•u hao ƒë∆∞·ªùng th·∫≥ng
    try:
        KHAU_HAO = VON_DAU_TU / DONG_DOI
    except ZeroDivisionError:
        KHAU_HAO = 0

    EBIT = DOANH_THU - CHI_PHI - KHAU_HAO
    THUE = EBIT * THUE_SUAT if EBIT > 0 else 0
    EAT = EBIT - THUE
    NCF_NAM = EAT + KHAU_HAO
    
    st.metric("Net Cash Flow (NCF) H√†ng nƒÉm", f"{NCF_NAM:,.0f} VNƒê", delta_color="normal")
    
    st.markdown("---")

    # 2. B·∫£ng D√≤ng Ti·ªÅn
    st.header("3. B·∫£ng D√≤ng Ti·ªÅn D·ª± √Ån (Cash Flow)")
    
    if DONG_DOI > 0:
        # T·∫°o DataFrame
        years = list(range(0, DONG_DOI + 1))
        cash_flow_data = {
            "NƒÉm": years,
            "Doanh Thu": [0] + [DOANH_THU] * DONG_DOI,
            "Chi Ph√≠": [0] + [CHI_PHI] * DONG_DOI,
            "Kh·∫•u Hao": [0] + [KHAU_HAO] * DONG_DOI,
            "EBIT (LN tr∆∞·ªõc thu·∫ø & l√£i)": [0] + [EBIT] * DONG_DOI,
            "Thu·∫ø TNDN": [0] + [THUE] * DONG_DOI,
            "EAT (LN sau thu·∫ø)": [0] + [EAT] * DONG_DOI,
            "D√≤ng Ti·ªÅn Thu·∫ßn (NCF)": [-VON_DAU_TU] + [NCF_NAM] * DONG_DOI,
            "NCF C·ªông D·ªìn": [0] * (DONG_DOI + 1),
            "NCF Chi·∫øt Kh·∫•u": [0] * (DONG_DOI + 1),
            "NCF Chi·∫øt Kh·∫•u C·ªông D·ªìn": [0] * (DONG_DOI + 1),
        }
        
        df_cf = pd.DataFrame(cash_flow_data)
        
        # T√≠nh to√°n c·ªông d·ªìn v√† chi·∫øt kh·∫•u
        df_cf.loc[0, "NCF C·ªông D·ªìn"] = -VON_DAU_TU
        for i in range(1, DONG_DOI + 1):
            df_cf.loc[i, "NCF C·ªông D·ªìn"] = df_cf.loc[i-1, "NCF C·ªông D·ªìn"] + df_cf.loc[i, "D√≤ng Ti·ªÅn Thu·∫ßn (NCF)"]
            
            discount_factor = 1 / ((1 + WACC / 100.0)**i)
            df_cf.loc[i, "NCF Chi·∫øt Kh·∫•u"] = df_cf.loc[i, "D√≤ng Ti·ªÅn Thu·∫ßn (NCF)"] * discount_factor
            
            df_cf.loc[i, "NCF Chi·∫øt Kh·∫•u C·ªông D·ªìn"] = df_cf.loc[i-1, "NCF Chi·∫øt Kh·∫•u C·ªông D·ªìn"] + df_cf.loc[i, "NCF Chi·∫øt Kh·∫•u"]

        df_cf.loc[0, "NCF Chi·∫øt Kh·∫•u C·ªông D·ªìn"] = -VON_DAU_TU # G√°n l·∫°i v·ªën ƒë·∫ßu t∆∞
        
        # Hi·ªÉn th·ªã b·∫£ng
        st.dataframe(df_cf.style.format(
            {col: "{:,.0f}" for col in df_cf.columns if col not in ["NƒÉm"]}
        ), use_container_width=True)
    else:
        st.warning("D√≤ng ƒë·ªùi d·ª± √°n ph·∫£i l·ªõn h∆°n 0 ƒë·ªÉ x√¢y d·ª±ng b·∫£ng d√≤ng ti·ªÅn.")

    st.markdown("---")

    # 3. T√≠nh to√°n c√°c ch·ªâ s·ªë
    st.header("4. C√°c Ch·ªâ S·ªë ƒê√°nh Gi√° Hi·ªáu Qu·∫£")

    if DONG_DOI > 0:
        NPV, IRR, PP, DPP = calculate_financial_metrics(VON_DAU_TU, NCF_NAM, WACC, DONG_DOI)

        # ƒê·ªãnh d·∫°ng k·∫øt qu·∫£
        npv_text = f"{NPV:,.0f} VNƒê"
        irr_text = f"{IRR*100:.2f} %" if not np.isnan(IRR) else "Kh√¥ng x√°c ƒë·ªãnh"
        pp_text = f"{PP:.2f} nƒÉm"
        dpp_text = f"{DPP:.2f} nƒÉm"

        col3, col4, col5, col6 = st.columns(4)
        
        col3.metric("Net Present Value (NPV)", npv_text, delta_color="off")
        col4.metric("Internal Rate of Return (IRR)", irr_text, delta_color="off")
        col5.metric("Payback Period (PP)", pp_text, delta_color="off")
        col6.metric("Discounted Payback Period (DPP)", dpp_text, delta_color="off")

        st.session_state.financial_metrics = {
            "NPV": NPV, "IRR": IRR, "PP": PP, "DPP": DPP,
            "WACC": WACC, "DONG_DOI": DONG_DOI
        }
    
    st.markdown("---")

    # 4. Ph√¢n t√≠ch c·ªßa AI
    st.header("5. Ph√¢n T√≠ch Chuy√™n S√¢u c·ªßa AI")

    if st.session_state.project_data and client:
        if st.button("Y√äU C·∫¶U AI PH√ÇN T√çCH HI·ªÜU QU·∫¢", key="analyze_button"):
            with st.spinner("AI ƒëang ph√¢n t√≠ch c√°c ch·ªâ s·ªë t√†i ch√≠nh..."):
                try:
                    # T·∫°o prompt chi ti·∫øt cho AI
                    analysis_prompt = f"""
                    B·∫°n l√† m·ªôt nh√† ph√¢n t√≠ch t√†i ch√≠nh cao c·∫•p. H√£y ƒë√°nh gi√° hi·ªáu qu·∫£ c·ªßa d·ª± √°n kinh doanh n√†y d·ª±a tr√™n c√°c ch·ªâ s·ªë sau (ƒê∆°n v·ªã ti·ªÅn t·ªá l√† VNƒê):

                    - V·ªën ƒê·∫ßu T∆∞ Ban ƒê·∫ßu: {VON_DAU_TU:,.0f}
                    - D√≤ng ƒë·ªùi d·ª± √°n: {DONG_DOI} nƒÉm
                    - WACC (Chi ph√≠ v·ªën): {WACC:.2f}%
                    - NPV: {NPV:,.0f}
                    - IRR: {IRR*100:.2f}%
                    - PP (Ho√†n v·ªën): {PP:.2f} nƒÉm
                    - DPP (Ho√†n v·ªën chi·∫øt kh·∫•u): {DPP:.2f} nƒÉm

                    Ph√¢n t√≠ch c·ªßa b·∫°n c·∫ßn t·∫≠p trung v√†o:
                    1. ƒê√°nh gi√° chung: D·ª± √°n c√≥ kh·∫£ thi v·ªÅ m·∫∑t t√†i ch√≠nh kh√¥ng? (D·ª±a tr√™n NPV v√† so s√°nh IRR v·ªõi WACC).
                    2. R·ªßi ro v·ªÅ th·ªùi gian: Th·ªùi gian ho√†n v·ªën c√≥ ph√π h·ª£p v·ªõi d√≤ng ƒë·ªùi d·ª± √°n v√† r·ªßi ro kh√¥ng?
                    3. Ki·∫øn ngh·ªã: ƒê·ªÅ xu·∫•t h√†nh ƒë·ªông ti·∫øp theo (Ch·∫•p nh·∫≠n, T·ª´ ch·ªëi, ho·∫∑c Y√™u c·∫ßu ƒëi·ªÅu ch·ªânh).
                    4. Tr√¨nh b√†y d∆∞·ªõi d·∫°ng vƒÉn b·∫£n chuy√™n nghi·ªáp.
                    """

                    response = client.models.generate_content(
                        model='gemini-2.5-flash',
                        contents=analysis_prompt
                    )
                    st.success("Ph√¢n t√≠ch ho√†n t·∫•t!")
                    st.info(response.text)

                except APIError as e:
                    st.error(f"L·ªói API Gemini: {e}")
                except Exception as e:
                    st.error(f"L·ªói khi AI th·ª±c hi·ªán ph√¢n t√≠ch: {e}")
    elif st.session_state.project_data:
         st.warning("Kh√¥ng th·ªÉ th·ª±c hi·ªán ph√¢n t√≠ch chuy√™n s√¢u c·ªßa AI do thi·∫øu API Key.")
